name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
          matrix:
            cxx:
              - g++
            build_type: [Release]
            std: [17]
    steps:
    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%Y%m")"
      shell: bash
    - name: Cache
      uses: actions/cache@v2.1.4
      id: EnvCache
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: |
              ${{ github.workspace }}/Env/usr/
            #  /usr/local/include/spdlog
            #  /usr/local/lib/libspdlog.a
            #  /usr/local/lib/pkgconfig/spdlog.pc
            #  /usr/local/lib/cmake/spdlog
            #  /usr/local/include/catch2
            #  /usr/local/lib/libCatch2WithMain.a
            #  /usr/local/lib/cmake/Catch2
            #  /usr/local/lib/libgmock*
            #  /usr/local/lib/libgtest*
            #  /usr/local/include/gtest
            #  /usr/local/include/gmock
            #  /usr/local/lib/cmake/GTest
            #  /usr/local/lib/cmake/jsoncpp
            #  /usr/local/lib/libjsoncpp*
            #  /usr/local/include/json
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-H
    - name: TDD_Learning
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        path: SourceCode
    - name: CK_Jsonhpp
      if: steps.EnvCache.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        repository: open-source-parsers/jsoncpp
        path: Env/jsoncpp
        ref: 1.9.4
    - name: Install_Jsonhpp
      if: steps.EnvCache.outputs.cache-hit != 'true'
      run:  |
            mkdir ${{ github.workspace }}/Env/jsoncpp/MBuild
            cd ${{ github.workspace }}/Env/jsoncpp/MBuild
            cmake ..
            sudo make install DESTDIR=${{ github.workspace }}/Env/ -j32
    - name: install_boost
      # You may pin to the exact commit or the version.
      # uses: MarkusJx/install-boost@072e2dd3b37f8652cda1b00bcaca9bcfe06b7278
      uses: MarkusJx/install-boost@v1.0.1
      id: install-boost
      with:
        # The boost version to install, e.g. "1.73.0"
        boost_version: 1.73.0
        platform_version: 18.04
        boost_install_dir: ${{ github.workspace }}/Env

    - name: List contents of boost directory
      run: ls
      working-directory: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      shell: bash
    - run: echo "${{ steps.install-boost.outputs.BOOST_ROOT }}"
      shell: bash
    - run: echo "${{ steps.install-boost.outputs.BOOST_VER }}"
      shell: bash
    - name: CK_GTest
      if: steps.EnvCache.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        repository: google/googletest
        path: Env/googletest
        ref: v1.10.x
    - name: Install_GTest
      if: steps.EnvCache.outputs.cache-hit != 'true'
      run:  |
            mkdir ${{ github.workspace }}/Env/googletest/MBuild
            cd ${{ github.workspace }}/Env/googletest/MBuild
            cmake ..
            sudo make install DESTDIR=${{ github.workspace }}/Env/ -j32
    - name: CK_spdlog
      if: steps.EnvCache.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        repository: gabime/spdlog
        path: Env/spdlog
        ref: v1.8.2
    - name: Install_spdlog
      if: steps.EnvCache.outputs.cache-hit != 'true'
      run:  |
            mkdir ${{ github.workspace }}/Env/spdlog/MBuild
            cd ${{ github.workspace }}/Env/spdlog/MBuild
            cmake ..
            sudo make install DESTDIR=${{ github.workspace }}/Env/ -j32
    - name: CK_Catch2
      if: steps.EnvCache.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        repository: catchorg/Catch2
        path: Env/Catch2
        ref: v2.13.4
    - name: Install_Catch2
      if: steps.EnvCache.outputs.cache-hit != 'true'
      run:  |
            mkdir ${{ github.workspace }}/Env/Catch2/MBuild
            cd ${{ github.workspace }}/Env/Catch2/MBuild
            cmake ..
            sudo make install DESTDIR=${{ github.workspace }}/Env/ -j32
      shell: bash

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/SourceCode/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/SourceCode/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ../ -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/Env/usr/local/lib/
      env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
    - name: Build
      working-directory: ${{github.workspace}}/SourceCode/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -j32

    - name: Test
      working-directory: ${{github.workspace}}/SourceCode
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ${{github.workspace}}/SourceCode/Run.sh
